{"version":3,"sources":["helpers/api.ts","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","App","useState","posts","setPosts","isLoading","setIsLoading","search","setSearch","handleLoadClick","a","postsFromServer","usersFromServer","commentsFromServer","postsWithComments","map","item","user","find","person","id","userId","comments","filter","comment","postId","filterPostList","useMemo","title","body","toLowerCase","includes","className","length","type","onChange","event","target","value","placeholder","post","key","name","email","address","suite","street","city","c","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"sPA8BMA,G,MAAS,SAAIC,GACjB,OAAOC,MA/BO,wCA+BSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCkEhBC,EAtFO,WAAO,IAAD,EACAC,mBAAiB,IADjB,mBACnBC,EADmB,KACZC,EADY,OAEQF,oBAAS,GAFjB,mBAEnBG,EAFmB,KAERC,EAFQ,OAGEJ,mBAAiB,IAHnB,mBAGnBK,EAHmB,KAGXC,EAHW,KAKpBC,EAAe,uCAAG,kCAAAC,EAAA,6DACtBJ,GAAa,GADS,SDkBIX,EAAa,SClBjB,cAGhBgB,EAHgB,gBDoBIhB,EAAa,SCpBjB,cAIhBiB,EAJgB,gBDsBOjB,EAAgB,YCtBvB,OAKhBkB,EALgB,OAOhBC,EAAoBH,EAAgBI,KAAI,SAAAC,GAAI,kCAE3CA,GAF2C,IAG9CC,KAAML,EAAgBM,MAAK,SAAAC,GAAM,OAAKA,EAAOC,KAAOJ,EAAKK,UACzDC,SAAUT,EAAmBU,QAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAWT,EAAKI,WAI3EhB,EAASU,GAfa,4CAAH,qDAkBfY,EAAiBC,mBAAQ,kBAC7BxB,EAAMoB,QAAO,qBAAGK,MAAH,EAAUC,MACpBC,cACAC,SAASxB,EAAOuB,oBAClB,CAACvB,EAAQJ,IAEZ,OACE,yBAAK6B,UAAU,OACb,wBAAIA,UAAU,SAAd,yBACE7B,EAAM8B,OAKN,oCACE,2BACED,UAAU,eACVE,KAAK,OACLC,SAAU,SAAAC,GAAK,OAAK5B,EAAU4B,EAAMC,OAAOC,QAC3CC,YAAY,4BAEd,wBAAIP,UAAU,aACXN,EAAeX,KAAI,SAAAyB,GAAI,uBACtB,wBAAIR,UAAU,YAAYS,IAAKD,EAAKpB,IAClC,4BAAKoB,EAAKZ,OACV,2BAAIY,EAAKX,MACT,6BACE,sCACA,uBAAGG,UAAU,cAAb,UAA2BQ,EAAKvB,YAAhC,aAA2B,EAAWyB,MACtC,6BACE,0BAAMV,UAAU,aAAhB,gBADF,UAEGQ,EAAKvB,YAFR,aAEG,EAAW0B,OAEd,iCACE,0BAAMX,UAAU,aAAhB,kBADF,oBAGOQ,EAAKvB,YAHZ,aAGO,EAAW2B,QAAQC,MAH1B,8CAIML,EAAKvB,YAJX,aAIM,EAAW2B,QAAQE,OAJzB,8CAKMN,EAAKvB,YALX,aAKM,EAAW2B,QAAQG,QAI3B,2BACE,0BAAMf,UAAU,qBAAhB,cADF,UAEGQ,EAAKlB,gBAFR,aAEG,EAAeP,KAAI,SAAAiC,GAAC,OACnB,6BAAShB,UAAU,gBAAgBS,IAAKO,EAAE5B,IACxC,yBAAKY,UAAU,YACb,uBAAGA,UAAU,aAAagB,EAAEN,MAC5B,2BAAIM,EAAEnB,MACN,uBAAGG,UAAU,SAASgB,EAAEL,mBAvCxC,4BAAQX,UAAU,eAAeE,KAAK,SAASe,QAASxC,EAAiByC,SAAU7C,GAChFA,EAAY,aAAe,UCzCtC8C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.0cc6f929.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user?: User;\n  comments?: Comment[];\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  email: string;\n  address: {\n    suite: string;\n    street: string;\n    city: string;\n  };\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getPosts = () => getAll<Post>('posts');\n\nexport const getUsers = () => getAll<User>('users');\n\nexport const getComments = () => getAll<Comment>('comments');\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\n\nimport\n{\n  getPosts,\n  getUsers,\n  getComments,\n  Post,\n}\n  from './helpers/api';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [search, setSearch] = useState<string>('');\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    const postsFromServer = await getPosts();\n    const usersFromServer = await getUsers();\n    const commentsFromServer = await getComments();\n\n    const postsWithComments = postsFromServer.map(item => (\n      {\n        ...item,\n        user: usersFromServer.find(person => (person.id === item.userId)),\n        comments: commentsFromServer.filter(comment => comment.postId === item.id),\n      }\n    ));\n\n    setPosts(postsWithComments);\n  };\n\n  const filterPostList = useMemo(() => (\n    posts.filter(({ title, body }) => (title + body)\n      .toLowerCase()\n      .includes(search.toLowerCase()))\n  ), [search, posts]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Dynamic list of posts</h1>\n      {!posts.length ? (\n        <button className=\"btn load-btn\" type=\"button\" onClick={handleLoadClick} disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <>\n          <input\n            className=\"filter-input\"\n            type=\"text\"\n            onChange={event => (setSearch(event.target.value))}\n            placeholder=\"search by title or text\"\n          />\n          <ul className=\"post-list\">\n            {filterPostList.map(post => (\n              <li className=\"post-card\" key={post.id}>\n                <h2>{post.title}</h2>\n                <p>{post.body}</p>\n                <div>\n                  <h3>User: </h3>\n                  <p className=\"user__name\">{post.user?.name}</p>\n                  <div>\n                    <span className=\"bold-font\">User-email: </span>\n                    {post.user?.email}\n                  </div>\n                  <address>\n                    <span className=\"bold-font\">User-address: </span>\n                    {\n                      `${post.user?.address.suite},\n                      ${post.user?.address.street},\n                      ${post.user?.address.city}`\n                    }\n                  </address>\n                </div>\n                <p>\n                  <span className=\"comments__heading\">Comments: </span>\n                  {post.comments?.map(c => (\n                    <section className=\"post__comment\" key={c.id}>\n                      <div className=\"comments\">\n                        <p className=\"bold-font\">{c.name}</p>\n                        <p>{c.body}</p>\n                        <p className=\"email\">{c.email}</p>\n                      </div>\n                    </section>\n                  ))}\n                </p>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}